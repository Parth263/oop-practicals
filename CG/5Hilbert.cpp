/* B17 Write C++/Java program to generate Hilbert curve using concept of fractals.  */

#include<iostream>
#include<graphics.h>
using namespace std;

void move(int j, int h, int &x,int &y)   
		
{
	if(j==1)       //UPPER
	     y-=h;
	else if(j==2)  //RIGHT
	     x+=h;   
	else if(j==3)  //DOWN
	     y+=h;
	else if(j==4)   //LEFT
	     x-=h;
	
	lineto(x,y);
}

void hilbert(int u, int r,int d ,int l, int i, int h, int &x, int &y)
{              
	if(i>0)   
	{
		i--;  
		
		hilbert(r,u,l,d,i,h,x,y);   
		move(u,h,x,y);    //  |
		delay(1000);
		
		hilbert(u,r,d,l,i,h,x,y);
		move(r,h,x,y);    // __
        		delay(1000);
		
		hilbert(u,r,d,l,i,h,x,y);
        		move(d,h,x,y);   // |
		delay(1000);

		hilbert(l,d,r,u,i,h,x,y);
		delay(1000);
		
	}
}




int main()
{

int n, x=100,y=350,h=30,r=2,d=3,l=4,u=1;
int driver=DETECT,mode=0;
initgraph(&driver,&mode,NULL);

cout<<"Give the value of n: ";
cin>>n;

moveto(x,y);   //move to xpos and ypos
hilbert(u,r,d,l,n,h,x,y);            

delay(1000);
closegraph();

return 0;
}


// This C++ program generates a Hilbert curve using the concept of fractals and recursion. The Hilbert curve is a continuous fractal space-filling curve first described by the German mathematician David Hilbert in 1891. Before diving into the code, let's understand the Hilbert curve and its properties.

// ### Hilbert Curve:
// - A Hilbert curve is a type of fractal curve that has the property of being space-filling, meaning it can cover an entire 2D area through its infinite iterations.
// - It's constructed recursively, starting with a simple pattern that is repeated and expanded upon in each iteration, becoming more complex and closer to filling a square space as the number of iterations (usually denoted as `n`) increases.

// ### The Code Explained

// #### Function `move`
// - This function moves the drawing cursor in one of four directions (up, right, down, left) based on the input `j`.
// - It then draws a line to the new cursor position `(x, y)`.

// #### Function `hilbert`
// - This is a recursive function that generates the Hilbert curve.
// - It receives the directions for moving (`u`, `r`, `d`, `l`) which represent up, right, down, and left respectively, the current iteration `i`, the length of each segment `h`, and references to the current position `x`, `y`.
// - The function calls itself recursively, altering the directions of movement in each call to create the Hilbert curve pattern. 
// - After each recursive call, it moves in a new direction to draw the next segment of the curve.

// #### Main Function
// - Initializes the graphics mode.
// - Takes an input `n` from the user, which specifies the depth of recursion for the Hilbert curve.
// - Sets the initial position `(x, y)` and segment length `h`.
// - Calls `hilbert` to draw the curve.
// - Waits for a short delay before closing the graphics window.

// ### Concepts Behind the Code

// #### Fractals and Recursion
// - **Fractals**: Fractals are complex patterns that look similar at any scale and can be generated by repeating a simple process over and over in an ongoing feedback loop. The Hilbert curve is an example of a fractal.
// - **Recursion**: This is a programming technique where a function calls itself. In this code, `hilbert` is a recursive function, essential for creating the fractal pattern of the Hilbert curve.

// #### Graphics in C++
// - The `graphics.h` library is used for drawing graphics. It's a library traditionally used in C and C++ for simple graphics operations. 

// ### What is a Hilbert Curve?
// A Hilbert curve is a fractal curve known for its space-filling property. As `n` increases, the curve becomes increasingly complex and fills more of the 2D space within its square bounds. It's commonly used in computer science and related fields due to its interesting properties, like locality-preserving behavior (nearby points in the curve remain nearby), which is useful in data compression and image processing.